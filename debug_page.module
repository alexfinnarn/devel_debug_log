<?php

/**
 * @file
 * Creates a page that shows debug messages.
 */

/**
 * Implements hook_menu().
 */
function debug_page_menu() {
  $items['admin/reports/debug'] = array(
    'title' => 'Debug messages',
    'description' => 'View debug messages.',
    'page callback' => 'debug_page_page',
    'access arguments' => array('access devel information'),
  );
  $items['debug-page/callback'] = array(
    'title' => 'Debug messages callback',
    'page callback' => 'debug_page_callback',
    'access arguments' => array('access devel information'),
  );

  return $items;
}

/**
 * Saves a debug message.
 *
 * @param $message
 *   A debug message to save, which can be:
 *   - string: saved as is.
 *   - object or array: saved serialized.
 */
function dbp($message, $title = '') {  
  if (is_array($message) || is_object($message)) {
    $message = serialize($message);
    $serialized = TRUE;
  }
  else {
    $serialized = FALSE;
  }

  $query = db_insert('debug_page_messages')->fields(array('timestamp', 'title', 'message', 'serialized'));
  $query->values(array(
    'timestamp' => REQUEST_TIME,
    'title' => $title,
    'message' => $message,
    'serialized' => $serialized ? 1 : 0,
  ));
  $query->execute();
}

/**
 * Checks if the message has already been saved during the current page request,
 * and saves the message only if it is not a repetition of a previous one.
 *
 * @param $message
 *   A debug message to save, which can be:
 *   - string: saved as is.
 *   - object or array: saved serialized.
 */
function dbp_once($message, $title = '') {
  $message_history = &drupal_static(__FUNCTION__);

  if (!isset($message_history)) {
    $message_history = array();
  }

  $serialized = serialize($message);
  $hash = md5($serialized);

  if (in_array($hash, $message_history)) {
    return;
  }

  $message_history[] = $hash;

  dbp($message, $title);
}

/**
 * Displays the debug messages table.
 */
function debug_page_page() {
  // Add auto-refresh javascript on the first page only.
  if (!isset($_GET['page'])) {
    drupal_add_js(drupal_get_path('module', 'debug_page') . '/debug_page.js');
  }

  $table_page = array(
    'messages_table' => debug_page_get_messages_table(),
    'pager' => array(
      '#theme' => 'pager',
    ),
  );

  return $table_page;
}

/**
 * Menu callback; Retrieve a JSON object containing data for the debug messages page.
 */
function debug_page_callback() {
  $data = array(
    'content' => drupal_render(debug_page_get_messages_table()),
  );

  drupal_json_output($data);
}

/**
 * Helper function to return the debug messages table.
 *
 * @return
 *   A render array containing the table.
 */
function debug_page_get_messages_table() {
  $results = db_select('debug_page_messages', 'm')
    ->extend('PagerDefault')
    ->limit(10)
    ->fields('m', array('timestamp', 'title', 'message', 'serialized'))
    ->orderBy('id', 'desc')
    ->execute();

  $rows = array();
  foreach ($results as $result) {
    if ($result->serialized) {
      $result->message = unserialize($result->message);
    }

    if (is_array($result->message) || is_object($result->message)) {
      $result->message = print_r($result->message, TRUE);
    }
        
    $rows[] = array(
      theme('debug_message_header', array('title' => check_plain($result->title), 'time' => format_date($result->timestamp, 'short'))),
    );
    
    $rows[] = array(
      theme('debug_message', array('message' => check_plain($result->message))),
    );
  }

  if (count($rows) == 0) {
    $content = array(
      'messages' => array(
        '#markup' => t('No messages.'),
        '#prefix' => '<div id="debug-page-messages-table">',
        '#suffix' => '</div>',
      )
    );
  }
  else {
    $content = array(
      'messages' => array(
        '#theme' => 'table',
        '#rows' => $rows,
        '#prefix' => '<div id="debug-page-messages-table">',
        '#suffix' => '</div>',
      )
    );
  }

  return $content;
}

/**
 * Implements hook_theme().
 */
function debug_page_theme() {
  return array(
    'debug_message_header' => array(
      'variables' => array(
        'title' => '',
        'time' => '',
      ),
    ),
    'debug_message' => array(
      'variables' => array(
        'message' => '',
      ),
    ),
  );
}

/**
 * Returns HTML for a debug message header.
 *
 * @param $variables
 *   An associative array containing:
 *   - title: The title given to the message.
 *   - time: The time of the message.
 */
function theme_debug_message_header($variables) {
  $output = $variables['time'];

  if (!empty($variables['title'])) {
    $output = $variables['title'] . ' @ ' . $output;
  }
  return $output;
}

/**
 * Returns HTML for a debug message.
 *
 * @param $variables
 *   An associative array containing:
 *   - message: The rendered message.
 */
function theme_debug_message($variables) {
  return '<pre>' . $variables['message'] . '</pre>';
}
